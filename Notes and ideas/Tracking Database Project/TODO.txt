Identify underlying database schema (MySQl, Microsoft SQL Server etc) the tracking database uses
Is there a Python API available?
Connect to AVSIP tool database directly or use API to retrieve data via JSON?
How complex is the AVSIP database?
Decide on a data structure to hold extracted values prior to SQL insertion (named tuple, dictionary, custom object?)
	
Obtain a copy of current tracking database either hosted or locally
Test if any credentials are required (except BL Active Directly login)
			How are these supplied? User prompt or config file?
Experiment with Python syntax for accessing/modifying records
Test if record values (shelf mark, ARK ID) from the AVSIP tool correspond with those in the tracking database 
Write function to get values from JSON/AVSIP database		
Do the return AVSIP values need any string formatting (e.g unusual 	separators “^^”)

Test writing values into the Tracking Database from a collection of test variables stored in a script
Test a bulk update or one record at a time?
	

	
	Rewrite the prototype as a functions within a module to be imported
		Tracking Database connection
		AVSIP database connection (if not using AVSIP API)
		Locating correct records in the Tracking Database (using passed arguments)
		Updating Tracking Database records
		Reporting successful updates to the user

	Testing and Refinement (09/03 – 29/03)
	How to verify insertion into the Tracking Database?
		Connection Failures?
		Error codes?
	Alert user unable to update database but pSIP building continued
		Issues
	Groupings of items with differing technical data (mix of tape speeds)

**********************************************************************************	
Aim 1: Match the correct item in the AVSIP tool with the correct record in the Tracking Database via a SQL query. The pSIP will have a list of item 			identifiers that are stored within, these will either be as string (i.e shelfmark “C123/3”) or an integer (ARK ID 234234). 

The shelfmark appears to be the only identifier consistant between the TDB and the AVSIP tool. Known as 'SAMICallNumber' String located at sipJSON['SamiCallNumber']





GET A NORMALL SIP AND A SU|RROGATE TO FIGURE OUT EXTRACTING FEATURES


Aim 2: Extract values relating to the correct item from the correct item and store these in a data structure appropriate for the SQL insertion process.

Aim 3: Using Python, insert the extracted values into the corresponding fields in the items record in the Tracking Database, translating the value into the correct 		format, if required.

	Aim 4: Attempt to retry insertion into the Tracking Database if there is an issue and 		alert the user if Tracking Database update was successful or not.



Objectives

	Objective 1: 
	
	Aim: Connect to the AVSIP tool and retrieve data. 	Output: JSON/SQL query

Connect to the AVSIP tool via the “Requests”1 module (to access its APIs) or use a suitable SQL driver (if connecting to underlying database) to locate an individual item record (N.B. items are stored in pSIPs and can contain multiple items). Using a suitable means of identification (see Aim 1) locate this item within the Tracking Database, connecting using PyOBCD and running an SQL query (in the Microsoft SQL Server syntax).

	Objective 2:
	
	Aim: Find values in data returned from objective 1. 	Output: Named tuple

Parse out values from the AVSIP tool, using standard dictionary techniques if using a JSON via the AVSIP tool API, or further SQL queries otherwise and store in a data structure for ease of insertion (Objective 3) such as a named tuple.

	Objective 3:

	Aim: Insert data into Tracking Database			Output: SQL insert


Convert these values into types required by the Tracking Database's schema 

Retrieve record or JSON of the process metadata and parse out required fields into